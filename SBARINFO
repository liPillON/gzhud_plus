// reference: https://zdoom.org/wiki/SBARINFO
//  defaults: $PROGDIR/gzdoom.pk3/sbarinfo/doom.txt


// sets the status bar to the specified game
// valid games are Doom, Heretic, Hexen, Strife, and None.
base DOOM;

// setting this to 0 (ZERO) will tell GZDoom to use a fullscreen viewport
// so the normal statusbar will be drawn without using GRNROCK flats as borders
height 0;

// if true, continues drawing the border where the status bar is normally placed
// using this will remove the HOM. If false, the border is not drawn behind the status bar
CompleteBorder true;

// monospaces all fonts to the specified character of their font
// alignment changes the position of off size characters within their spacing
MonospaceFonts true, "0", center;

// keep "resolution 320, 200;" to let the hud be affected by GZDoom's scaling just like the stock StatusBar is
// when in game, to avoid any pixel-scaling distortion, I would then suggest to either:
//  - execute "hud_AspectScale true; hud_scale 6; vid_ScaleToHeight 1440"
//  - execute "hud_AspectScale true; hud_scale 3; vid_ScaleToHeight 720"
resolution 320, 200;


////////////////////////////////////////////////////////////////////////////////
// changes: reduced size, tweaked positioning
statusbar inventory
{
	drawinventorybar DOOM, AlwaysShowCounter, 1, idIndexFontY, 145, 169, 173, 191, untranslated;
}

////////////////////////////////////////////////////////////////////////////////
// changes:
//  - Ammo1 count replaced with Berserk/WeaponIcon when a melee weapon is equipped
//  - ammo tally replaced with AmmoCapacity indicator for custom PlayerClasses
//  - Ammo2/Ammo2Capacity indicator for weapons that use them
// - optional LevelStats and PowerupTimers widgets
statusbar normal
{
	//background
	drawimage "STBAR", 0, 168;

	//ammo
	UsesAmmo {
		drawnumber 3, idStatusFont, untranslated, ammo1, 44, 171;
		drawnumber 3, idIndexFontY, untranslated, ammo2, 43, 184;
	} else {
		inInventory PowerStrength {
			DrawImage "PSTRA0", 24, 180, center, 24, 18;
		} else {
			DrawImage WeaponIcon, 24, 180, center, 36, 18;
		}
	}

	//health
	drawnumber 3, idStatusFont, untranslated, health, 90, 171;
	drawimage "STTPRCNT", 90, 171;

	//armor
	drawnumber 3, idStatusFont, untranslated, armor, 221, 171;
	drawimage "STTPRCNT", 221, 171;

	//keys
	drawswitchableimage keyslot 2 && 5, "nullimage", "STKEYS0", "STKEYS3", "STKEYS6", 239, 171;
	drawswitchableimage keyslot 3 && 6, "nullimage", "STKEYS1", "STKEYS4", "STKEYS7", 239, 181;
	drawswitchableimage keyslot 1 && 4, "nullimage", "STKEYS2", "STKEYS5", "STKEYS8", 239, 191;

	//ammo tally
playerType DoomPlayer {
	playerClass Marine {
		//PlayerType inherited from DoomPlayer, PlayerClass==Marine
		//eg: Vanilla (actor DoomPlayer:PlayerPawn, DisplayName=Marine)
		//eg: 2048guns (actor 2048Player:DoomPlayer:PlayerPawn, DisplayName=Marine, replaces DoomPlayer)
		drawnumber 3, idIndexFontY, untranslated, ammo(Clip), 288, 173;
		drawnumber 3, idIndexFontY, untranslated, ammo(Shell), 288, 179;
		drawnumber 3, idIndexFontY, untranslated, ammo(RocketAmmo), 288, 185;
		drawnumber 3, idIndexFontY, untranslated, ammo(Cell), 288, 191;
		drawnumber 3, idIndexFontY, untranslated, ammocapacity(Clip), 314, 173;
		drawnumber 3, idIndexFontY, untranslated, ammocapacity(Shell), 314, 179;
		drawnumber 3, idIndexFontY, untranslated, ammocapacity(RocketAmmo), 314, 185;
		drawnumber 3, idIndexFontY, untranslated, ammocapacity(Cell), 314, 191;

	} else {
		//PlayerType inherited from DoomPlayer, PlayerClass<>Marine
		//eg: SuperCharge (actor TangoPlayer:DoomPlayer:PlayerPawn, DisplayName=Default, replaces DoomPlayer)
		//eg: FinalDoomer (actor FDxxxPlayer:FDPlayerPawn:DoomPlayer:PlayerPawn, DisplayName=xxxGuy, replaces NOTHING)
		inInventory Clip       { drawnumber 3, idIndexFontY, untranslated, ammo(Clip), 288, 173;               }
		inInventory Shell      { drawnumber 3, idIndexFontY, untranslated, ammo(Shell), 288, 179;              }
		inInventory RocketAmmo { drawnumber 3, idIndexFontY, untranslated, ammo(RocketAmmo), 288, 185;         }
		inInventory Cell       { drawnumber 3, idIndexFontY, untranslated, ammo(Cell), 288, 191;               }
		inInventory Clip       { drawnumber 3, idIndexFontY, untranslated, ammocapacity(Clip), 314, 173;       }
		inInventory Shell      { drawnumber 3, idIndexFontY, untranslated, ammocapacity(Shell), 314, 179;      }
		inInventory RocketAmmo { drawnumber 3, idIndexFontY, untranslated, ammocapacity(RocketAmmo), 314, 185; }
		inInventory Cell       { drawnumber 3, idIndexFontY, untranslated, ammocapacity(Cell), 314, 191;       }
	}

} else {
	//PlayerType NOT inherited from DoomPlayer
	//BDLite (actor Doomer:PlayerPawn, DisplayName=Modern, replaces DoomPlayer)
	inInventory Clip       { drawnumber 3, idIndexFontY, untranslated, ammo(Clip), 288, 173;               }
	inInventory Shell      { drawnumber 3, idIndexFontY, untranslated, ammo(Shell), 288, 179;              }
	inInventory RocketAmmo { drawnumber 3, idIndexFontY, untranslated, ammo(RocketAmmo), 288, 185;         }
	inInventory Cell       { drawnumber 3, idIndexFontY, untranslated, ammo(Cell), 288, 191;               }
	inInventory Clip       { drawnumber 3, idIndexFontY, untranslated, ammocapacity(Clip), 314, 173;       }
	inInventory Shell      { drawnumber 3, idIndexFontY, untranslated, ammocapacity(Shell), 314, 179;      }
	inInventory RocketAmmo { drawnumber 3, idIndexFontY, untranslated, ammocapacity(RocketAmmo), 314, 185; }
	inInventory Cell       { drawnumber 3, idIndexFontY, untranslated, ammocapacity(Cell), 314, 191;       }
}

	//arms indicators
	drawimage "STARMS", 104, 168;
	drawswitchableimage weaponslot 2, "STGNUM2", "STYSNUM2", 111, 172;
	drawswitchableimage weaponslot 3, "STGNUM3", "STYSNUM3", 123, 172;
	drawswitchableimage weaponslot 4, "STGNUM4", "STYSNUM4", 135, 172;
	drawswitchableimage weaponslot 5, "STGNUM5", "STYSNUM5", 111, 182;
	drawswitchableimage weaponslot 6, "STGNUM6", "STYSNUM6", 123, 182;
	drawswitchableimage weaponslot 7, "STGNUM7", "STYSNUM7", 135, 182;

	//mugshot/inventory
	drawselectedinventory alternateonempty, AlwaysShowCounter, idIndexFontY, 145, 169, 173, 191, untranslated
	{
		drawmugshot "STF", 5, 143, 168;
	}

	//optional level stats
	ifCvarInt myhud_LevelStats, 1, equal {
		//kills
		DrawString myIndexFont, untranslated, "K", 6, 149;
		DrawNumber 3, myIndexFont, untranslated, kills, 20, 149;
		DrawString myIndexFont, untranslated, "/", 26, 149;
		DrawNumber 3, myIndexFont, untranslated, monsters, 40, 149;
		//items
		DrawString myIndexFont, untranslated, "I", 6, 155;
		DrawNumber 3, myIndexFont, untranslated, items, 20, 155;
		DrawString myIndexFont, untranslated, "/", 26, 155;
		DrawNumber 3, myIndexFont, untranslated, totalItems, 40, 155;
		//secrets
		DrawString myIndexFont, untranslated, "S", 6, 161;
		DrawNumber 3, myIndexFont, untranslated, secrets, 20, 161;
		DrawString myIndexFont, untranslated, "/", 26, 161;
		DrawNumber 3, myIndexFont, untranslated, totalSecrets, 40, 161;
	}

	//optional powerup timers
	ifCvarInt myhud_PowerupTimers, 1, equal {
		inInventory PowerLightAmp {
			DrawString myIndexFont, untranslated, "LAMP", 141, 155;
			DrawNumber 3, myIndexFont, untranslated, PowerupTime Infrared, 137, 161;
		}
		inInventory PowerIronFeet {
			DrawString myIndexFont, untranslated, "SUIT", 159, 155;
			DrawNumber 3, myIndexFont, untranslated, PowerupTime RadSuit, 155, 161;
		}
		inInventory PowerInvisibility {
			DrawString myIndexFont, untranslated, "BLUR", 177, 155;
			DrawNumber 3, myIndexFont, untranslated, PowerupTime BlurSphere, 173, 161;
		}
		inInventory PowerInvulnerable {
			DrawString myIndexFont, untranslated, "INVL", 195, 155;
			DrawNumber 3, myIndexFont, untranslated, PowerupTime InvulnerabilitySphere, 191, 161;
		}
	}
}


////////////////////////////////////////////////////////////////////////////////
// FullScreen InventoryBar
// provided in case a mod makes use of it
StatusBar InventoryFullscreen, FullscreenOffsets
{
	DrawInventoryBar DOOM, AlwaysShowCounter, NoArtiBox, 1, gzpFNT_IDX, -100, -34, -93, -12, gzpCLR_GLD;
}



////////////////////////////////////////////////////////////////////////////////
// FullScreen HUD, used when ScreenBlocks=11
// this is where the magic happens ;)
StatusBar Fullscreen, FullscreenOffsets
{
	//InventoryItem
	DrawSelectedInventory AlwaysShowCounter, gzpFNT_IDX, -100, -34, -93, -12, gzpCLR_GLD;

	//health
	DrawNumber 3, HUDFONT_DOOM, untranslated, health, DrawShadow(0,0), 45, -18;
	inInventory PowerStrength {
		DrawImage "PSTRA0", 59, -10, center, 22, 14;
	} else {
		DrawImage "MEDIA0", 59, -10, center, 22, 14;
	}

	//armor
	InInventory BasicArmor, 1 {
		DrawNumber 3, HUDFONT_DOOM, untranslated, armor, DrawShadow(0,0), 45, -36;
		DrawImage ArmorIcon, 59, -28, center, 22, 14;
	}

	//keys
	DrawSwitchableImage KeySlot 2 && 5, "NullImage", "STKEYS0", "STKEYS3", "STKEYS6", 77, -9, center; //blu
	DrawSwitchableImage KeySlot 3 && 6, "NullImage", "STKEYS1", "STKEYS4", "STKEYS7", 86, -9, center; //ylw
	DrawSwitchableImage KeySlot 1 && 4, "NullImage", "STKEYS2", "STKEYS5", "STKEYS8", 95, -9, center; //red

	//ammo
	UsesSecondaryAmmo {
		//current clip
		DrawImage WeaponIcon, -12, -28, center, 38, 14;
		DrawNumber 3, HUDFONT_DOOM, untranslated, ammo1, DrawShadow(0,0), -23, -36;
		//current weapon
		DrawImage AmmoIcon2, -12, -10, center, 22, 14;
		DrawNumber 3, HUDFONT_DOOM, untranslated, ammo2, DrawShadow(0,0), -23, -18;
	} else UsesAmmo {
		//current weapon
		DrawImage AmmoIcon1, -12, -10, center, 22, 14;
		DrawNumber 3, HUDFONT_DOOM, untranslated, ammo1, DrawShadow(0,0), -23, -18;
	} else {
		//melee
		//DrawImage WeaponIcon, -19, -10, center, 38, 14;
	}

	ifCvarInt gzpHUD_LevelInfo, 1, equal {
		//kills
		DrawNumber 4, gzpFNT_IDX, gzpCLR_BLK, kills, -32, 3;
		DrawString gzpFNT_IDX, gzpCLR_BLK, "/", -27, 3;
		DrawNumber 4, gzpFNT_IDX, gzpCLR_BLK, monsters, -11, 3;
		DrawString gzpFNT_IDX, gzpCLR_DRK, "K", -3, 3;
		//items
		DrawNumber 4, gzpFNT_IDX, gzpCLR_BLK, items, -32, 11;
		DrawString gzpFNT_IDX, gzpCLR_BLK, "/", -27, 11;
		DrawNumber 4, gzpFNT_IDX, gzpCLR_BLK, totalItems, -11, 11;
		DrawString gzpFNT_IDX, gzpCLR_DRK, "I", -3, 11;
		//secrets
		DrawNumber 4, gzpFNT_IDX, gzpCLR_BLK, secrets, -32, 19;
		DrawString gzpFNT_IDX, gzpCLR_BLK, "/", -27, 19;
		DrawNumber 4, gzpFNT_IDX, gzpCLR_BLK, totalSecrets, -11, 19;
		DrawString gzpFNT_IDX, gzpCLR_DRK, "S", -3, 19;
	}
}
