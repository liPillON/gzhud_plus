// reference: https://zdoom.org/wiki/SBARINFO
// stock definition: $PROGDIR/gzdoom.pk3/sbarinfo/doom.txt

// sets the status bar to the specified game
// valid games are Doom, Heretic, Hexen, Strife, and None.
base DOOM;

// setting this to 0 (ZERO) will tell GZDoom to use a fullscreen viewport
// so the normal statusbar will be drawn without using GRNROCK flats as borders
height 0;

// if true, continues drawing the border where the status bar is normally placed
// using this will remove the HOM. If false, the border is not drawn behind the status bar
CompleteBorder true;

// monospaces all fonts to the specified character of their font
// alignment changes the position of off size characters within their spacing
MonospaceFonts true, "0", center;

// keep "resolution 320, 200;" to let the hud be affected by GZDoom's scaling just like the stock StatusBar is
// when in game, to avoid any pixel-scaling distortion, I would then suggest to either:
//  - execute "hud_AspectScale true; hud_scale 6; vid_ScaleToHeight 1440"
//  - execute "hud_AspectScale true; hud_scale 3; vid_ScaleToHeight 720"
resolution 320, 200;



////////////////////////////////////////////////////////////////////////////////
// standard StatusBar, used in the automap screen
// we define it as EMPTY, so only stats and mapname will be displayed
StatusBar AutoMap {}



////////////////////////////////////////////////////////////////////////////////
// standard StatusBar and InventoryBar, used when ScreenBlocks<=10
// we leave both commented, so GZDoom will provide the stock resources
//StatusBar Inventory {}
//StatusBar Normal {}



////////////////////////////////////////////////////////////////////////////////
// FullScreen InventoryBar
// provided in case a mod makes use of it
StatusBar InventoryFullscreen, FullscreenOffsets
{
	DrawInventoryBar DOOM, AlwaysShowCounter, NoArtiBox, 1, gzpFNT_IDX, -100, -34, -93, -12, gzpCLR_GLD;
}



////////////////////////////////////////////////////////////////////////////////
// FullScreen HUD, used when ScreenBlocks=11
// this is where the magic happens ;)
StatusBar Fullscreen, FullscreenOffsets
{
	//InventoryItem
	DrawSelectedInventory AlwaysShowCounter, gzpFNT_IDX, -100, -34, -93, -12, gzpCLR_GLD;

	//health
	DrawNumber 3, HUDFONT_DOOM, untranslated, health, DrawShadow(0,0), 45, -18;
	inInventory PowerStrength {
		DrawImage "PSTRA0", 59, -10, center, 22, 14;
	} else {
		DrawImage "MEDIA0", 59, -10, center, 22, 14;
	}

	//armor
	InInventory BasicArmor, 1 {
		DrawNumber 3, HUDFONT_DOOM, untranslated, armor, DrawShadow(0,0), 45, -36;
		DrawImage ArmorIcon, 59, -28, center, 22, 14;
	}

	//keys
	DrawSwitchableImage KeySlot 2 && 5, "NullImage", "STKEYS0", "STKEYS3", "STKEYS6", 77, -9, center; //blu
	DrawSwitchableImage KeySlot 3 && 6, "NullImage", "STKEYS1", "STKEYS4", "STKEYS7", 86, -9, center; //ylw
	DrawSwitchableImage KeySlot 1 && 4, "NullImage", "STKEYS2", "STKEYS5", "STKEYS8", 95, -9, center; //red

	//ammo
	UsesSecondaryAmmo {
		//current clip
		DrawImage WeaponIcon, -12, -28, center, 38, 14;
		DrawNumber 3, HUDFONT_DOOM, untranslated, ammo1, DrawShadow(0,0), -23, -36;
		//current weapon
		DrawImage AmmoIcon2, -12, -10, center, 22, 14;
		DrawNumber 3, HUDFONT_DOOM, untranslated, ammo2, DrawShadow(0,0), -23, -18;
	} else UsesAmmo {
		//current weapon
		DrawImage AmmoIcon1, -12, -10, center, 22, 14;
		DrawNumber 3, HUDFONT_DOOM, untranslated, ammo1, DrawShadow(0,0), -23, -18;
	} else {
		//melee
		//DrawImage WeaponIcon, -19, -10, center, 38, 14;
	}

	ifCvarInt gzpHUD_LevelInfo, 1, equal {
		//kills
		DrawNumber 4, gzpFNT_IDX, gzpCLR_BLK, kills, -32, 3;
		DrawString gzpFNT_IDX, gzpCLR_BLK, "/", -27, 3;
		DrawNumber 4, gzpFNT_IDX, gzpCLR_BLK, monsters, -11, 3;
		DrawString gzpFNT_IDX, gzpCLR_DRK, "K", -3, 3;
		//items
		DrawNumber 4, gzpFNT_IDX, gzpCLR_BLK, items, -32, 11;
		DrawString gzpFNT_IDX, gzpCLR_BLK, "/", -27, 11;
		DrawNumber 4, gzpFNT_IDX, gzpCLR_BLK, totalItems, -11, 11;
		DrawString gzpFNT_IDX, gzpCLR_DRK, "I", -3, 11;
		//secrets
		DrawNumber 4, gzpFNT_IDX, gzpCLR_BLK, secrets, -32, 19;
		DrawString gzpFNT_IDX, gzpCLR_BLK, "/", -27, 19;
		DrawNumber 4, gzpFNT_IDX, gzpCLR_BLK, totalSecrets, -11, 19;
		DrawString gzpFNT_IDX, gzpCLR_DRK, "S", -3, 19;
	}
}
